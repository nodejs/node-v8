// Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include 'src/builtins/builtins-iterator-gen.h'

namespace iterator {
  // Returned from IteratorBuiltinsAssembler::GetIterator().
  @export
  struct IteratorRecord {
    // iteratorRecord.[[Iterator]]
    object: JSReceiver;

    // iteratorRecord.[[NextMethod]]
    next: JSAny;
  }

  extern macro IteratorBuiltinsAssembler::FastIterableToList(
      implicit context: Context)(JSAny): JSArray labels Slow;

  extern macro IteratorBuiltinsAssembler::GetIteratorMethod(
      implicit context: Context)(JSAny): JSAny;
  extern macro IteratorBuiltinsAssembler::GetIterator(
      implicit context: Context)(JSAny): IteratorRecord;
  extern macro IteratorBuiltinsAssembler::GetIterator(
      implicit context: Context)(JSAny, JSAny): IteratorRecord;

  extern macro IteratorBuiltinsAssembler::IteratorStep(
      implicit context: Context)(IteratorRecord): JSReceiver
      labels Done;
  extern macro IteratorBuiltinsAssembler::IteratorStep(
      implicit context: Context)(IteratorRecord, Map): JSReceiver
      labels Done;

  extern macro IteratorBuiltinsAssembler::IteratorValue(
      implicit context: Context)(JSReceiver): JSAny;
  extern macro IteratorBuiltinsAssembler::IteratorValue(
      implicit context: Context)(JSReceiver, Map): JSAny;

  extern macro IteratorBuiltinsAssembler::IteratorCloseOnException(
      implicit context: Context)(IteratorRecord, JSAny): never;

  extern macro IteratorBuiltinsAssembler::IterableToList(
      implicit context: Context)(JSAny, JSAny): JSArray;

  extern macro IteratorBuiltinsAssembler::StringListFromIterable(
      implicit context: Context)(JSAny): JSArray;

  extern builtin IterableToListMayPreserveHoles(implicit context:
                                                    Context)(JSAny, JSAny);
  extern builtin IterableToListWithSymbolLookup(implicit context:
                                                    Context)(JSAny);

  transitioning builtin GetIteratorWithFeedback(
      context: Context, receiver: JSAny, loadSlot: Smi, callSlot: Smi,
      feedback: Undefined|FeedbackVector): JSAny {
    let iteratorMethod: JSAny;
    typeswitch (feedback) {
      case (Undefined): {
        iteratorMethod = GetProperty(receiver, IteratorSymbolConstant());
      }
      case (feedback: FeedbackVector): {
        iteratorMethod = LoadIC(
            context, receiver, IteratorSymbolConstant(), loadSlot, feedback);
      }
    }
    return CallIteratorWithFeedback(
        context, receiver, iteratorMethod, callSlot, feedback);
  }

  transitioning builtin CallIteratorWithFeedback(
      context: Context, receiver: JSAny, iteratorMethod: JSAny, callSlot: Smi,
      feedback: Undefined|FeedbackVector): JSAny {
    const callSlotUnTagged: uintptr = Unsigned(SmiUntag(callSlot));
    CollectCallFeedback(iteratorMethod, context, feedback, callSlotUnTagged);
    const iteratorCallable: Callable = Cast<Callable>(iteratorMethod)
        otherwise ThrowCalledNonCallable(iteratorMethod);
    return Call(context, iteratorCallable, receiver);
  }

  transitioning
  macro IteratorCloseOnException(implicit context: Context)(
      iterator: IteratorRecord, exception: Object): never labels
  IfException(Object) {
    // Let return be ? GetMethod(iterator, "return").
    let method: JSAny;
    try {
      method = GetProperty(iterator.object, kReturnString);
    } catch (e) {
      goto IfException(e);
    }

    // If return is undefined, return Completion(completion).
    if (method == Undefined || method == Null) goto IfException(exception);

    // Let innerResult be Call(return, iterator, « »).
    // If an exception occurs, the original exception remains bound
    try {
      Call(context, method, iterator.object);
    } catch (_e) {
      goto IfException(exception);
    }

    // (If completion.[[Type]] is throw) return Completion(completion).
    goto IfException(exception);
  }
}
